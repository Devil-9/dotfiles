snippet sqrt "Square Root using BS"
ll sqrrt(ll n) {
	ll lo = 0, hi = 2e9;
	while (hi - lo > 1) {
		ll mid = lo + (hi - lo) / 2;
		if (mid * mid <= n) {
			lo = mid;
		} else hi = mid;
	}
	return lo;
}
endsnippet
snippet zfun "Z-Function"
vector<int> zFunc(string &s) {
	int n = sz(s), l = 0, r = 0;
	vector<int> z(n);

	FOR(i, 1, n) {
		if (i <= r)
			z[i] = min(r - i + 1, z[i - l]);
		while (i + z[i] < n && s[z[i]] == s[i + z[i]])
			++z[i];
		if (i + z[i] - 1 > r)
			l = i, r = i + z[i] - 1;
	}
	return z;
}
endsnippet
snippet preffun "Prefix Function"
vector<int> prefFunc(string &s) {
	int n = sz(s);
	vector<int> pi(n);

	FOR(i, 1, n) {
		int j = pi[i - 1];
		while (j > 0 && s[i] != s[j])
			j = pi[j - 1];
		if (s[i] == s[j])
			j++;
		pi[i] = j;
	}
	return pi;
}
endsnippet
snippet subset "Subsets using Bitmask"
FOR(i, 0, (1 << n) - 1) { // iterating thru all subsets (total 2^n - 1)
	FOR(j, 0, n) {
		if (i >> j & 1) { // if jth bit is set on number i
			$0
		} else
	}
}
endsnippet
snippet sieve "Sieve of Eratothenes"
vector<bool> is_prime;

is_prime.resize(n + 1, 1);
is_prime[0] = is_prime[1] = 0;
for (int i = 2; i * i <= n; i++) {
	if (is_prime[i]) {
		for (int j = i * i; j <= n; j += i)
			is_prime[j] = 0;
	}
}
endsnippet
snippet isp "Palindrome"
bool is_p(const string_view &s) {
	return equal(s.begin(), s.begin() + s.size()/2, s.rbegin());
}
endsnippet
snippet dsu "Disjoint Set Union"
struct DSU {
	int n;
	vector<vector<int>> graph;
	vector<int> label, SZ;

	void init(int _n) {
		n = _n;
		graph = vector<vector<int>> (n);
		label = SZ = vector<int> (n);
		FOR(i, 0, n) {
			SZ[i] = 1; label[i] = i;
		}
	}

	void relabel(int v, int target) { //relabel comp of v to target
		if (label[v] == target) return;
		label[v] = target;

		for (int x: graph[v]) relabel(x, target);
	}

	void merge(int a, int b) {
		if (label[a] == label[b]) return;

		graph[a].push_back(b);
		graph[b].push_back(a);

		if (SZ[label[a]] > SZ[label[b]]) swap(a, b); //assume SZ[label[a]] <= SZ[label[b]]

		SZ[label[b]] += SZ[label[a]];
		SZ[label[a]] = 0;
		relabel(a, label[b]);
	}

	int find(int n) { return label[n]; }
};
endsnippet
snippet pnc2
const ll NC = 200005;
ll fact[NC], factinv[NC], inv[NC];

void init() {
	inv[1] = 1;
	FOR(i, 2, NC-1)
		inv[i] = (MOD - MOD / i) * inv[MOD % i] % MOD;

	fact[0] = fact[1] = 1;
	FOR(i, 2, NC-1)
		fact[i] = i * fact[i-1] % MOD;

	factinv[0] = factinv[1] = 1;
	FOR(i, 2, NC-1)
		factinv[i] = inv[i] * factinv[i-1] % MOD;
}

ll ncr(ll n, ll r) {
	if (n < r) return 0;
	return (fact[n] * factinv[r]%MOD) * factinv[n - r]%MOD;
}
endsnippet
snippet pnc "Combinatorics"
const ll NC = 200005;

void init() {
	fact[0] = 1;
	FOR(i, 1, NC) {
		fact[i] = mmul(fact[i-1], i);
	}
}

ll ncr(ll n, ll r) {
	if (n < r) return 0;
	return (fact[n] * minv(fact[r])%MOD) * minv(fact[n-r])%MOD;
}
endsnippet
snippet mod "Modular Arithmetic"
const int MOD = 1e9+7; // 998244353;

ll madd(ll a, ll b) { return (a + b) % MOD; }
ll msub(ll a, ll b) { return (((a - b) % MOD) + MOD) % MOD; }
ll mmul(ll a, ll b) { return ((a % MOD) * (b % MOD)) % MOD; }
ll mpow(ll a, ll b) { // logb
	ll res = 1;
	while (b > 0) {
		if (b & 1)
			res = (res * a) % MOD;
		a = (a * a) % MOD;
		b >>= 1;
	}
	return res;
}
ll minv(ll a) { return mpow(a, MOD - 2); }
ll mdiv(ll a, ll b) { return mmul(a, minv(b)); }
endsnippet
